summary(fit)
View(QoH_Data)
plot (1:20, wss,type="b",xlab="Number of Clusters",ylab="Within groups sum of squares")
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
tf_1<-num_vect>=6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"kim")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(c(1:3),c("X","Y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNA
play()
y
z
c(y,z)
nxt()
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector<-c(1:20)
myVector<-1:20
myVector
play()
c(1:20)
1:20
nxt()
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix
myMatrix2(data=1:20,nrow=4,ncol=5)
myMatrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myData)
cnames<-c("patient","age","weight","bp","rating","test")
play()
?colnames
nxt()
colnames(myData)<-cnames
myData
swirl
swirl()
getwd()
?dnorm
?dnorm
?rbinom
?exp
exp(1)
exp(2)
?rpois
?Rprof
set.seed(1)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
install.packages("knitr")
install.packages("knitr")
cleaned_activity_interval_steps <- aggregate( steps~interval
,data=cleaned_activity,mean,na.rm=TRUE)
# Reproducible Research: Peer Assessment 1
library(knitr)
## Loading and preprocessing the data
### Loading
```{r}
activity <- read.csv("activity.csv",header=TRUE,quote="\"")
```
### Preprocessing and cleaning
#### Convert date to date type
```{r}
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
```
#### Convert interval to numeric
```{r}
activity$interval <- as.double(activity$interval)
```
#### Convert steps to numeric
```{r}
activity$steps <- as.double(activity$steps)
```
## What is mean total number of steps taken per day?
Sum of the number of steps taken per day
```{r}
total_daily_step <- aggregate(steps ~ date,data=activity,sum,na.rm = TRUE)
```
#### Make a histogram of the total number of steps taken each day
```{r dailyStepsHistogram}
hist(total_daily_step$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day"
,)
```
#### Calculate and report the mean and median total number of steps taken per day
Mean of total daily number of steps is:
```{r}
mean(total_daily_step$steps)
```
Median of total daily number of steps is:
```{r}
median(total_daily_step$steps)
```
## What is the average daily activity pattern?
Aggregate the steps by interval
```{r}
interval_steps <- aggregate(steps~interval,data=activity,mean,na.rm=TRUE)
```
#### Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r avgDailyActivity}
plot(x=interval_steps$interval,
y=interval_steps$steps,
type="l",
xlab="Interval",
ylab="Average number of steps",
main="Average daily activity pattern over intervals")
```
#### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
interval_steps [ interval_steps$steps==max(interval_steps$steps),]
```
## Imputing missing values
#### Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(activity$steps))
```
#### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Fill in the missing values using the mean for 5-minute interval.
#### Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
cleaned_activity <- activity
cleaned_activity[is.na(cleaned_activity$steps),"steps"] <-
interval_steps[interval_steps$interval==cleaned_activity[
is.na(cleaned_activity$steps)
,"interval"]
,"steps"]
```
#### Make a histogram of the total number of steps taken each day
```{r}
cleaned_activity_daily_total <- aggregate(steps ~ date,data=cleaned_activity,sum)
```
#### Make a histogram of the total number of steps taken each day
```{r imputedDailyStepsHistogram}
hist(cleaned_activity_daily_total$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day, after imputing NAs"
,)
```
#### Calculate and report the mean and median total number of steps taken per day.
```{r}
mean(cleaned_activity_daily_total$steps)
median(cleaned_activity_daily_total$steps)
```
#### Do these values differ from the estimates from the first part of the assignment?
Mean has not changed.
Median increases by 1.
#### What is the impact of imputing missing data on the estimates of the total daily number of steps?
Summary of total daily number of steps before and after imputing:
```{r}
summary(total_daily_step)
summary(cleaned_activity_daily_total)
```
Summarising from the statistics shown above, the impact of imputing missing data is minimal. The first quartile, median and third qarutile change slightly but not tremendously. The mean, minimum and maximum number of steps stay the same.
## Are there differences in activity patterns between weekdays and weekends?
#### Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
```{r}
cleaned_activity$day <- weekdays(cleaned_activity$date)
cleaned_activity[cleaned_activity$day %in% c("Sunday","Saturday"),"day"] <- "Weekend"
cleaned_activity[cleaned_activity$day %in% c("Monday","Tuesday"
,"Wednesday","Thursday","Friday"),"day"] <- "Weekday"
cleaned_activity$day <- as.factor(cleaned_activity$day)
```
#### Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was creating using simulated data
# Reproducible Research: Peer Assessment 1
library(knitr)
## Loading and preprocessing the data
### Loading
```{r}
activity <- read.csv("activity.csv",header=TRUE,quote="\"")
```
### Preprocessing and cleaning
#### Convert date to date type
```{r}
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
```
#### Convert interval to numeric
```{r}
activity$interval <- as.double(activity$interval)
```
#### Convert steps to numeric
```{r}
activity$steps <- as.double(activity$steps)
```
## What is mean total number of steps taken per day?
Sum of the number of steps taken per day
```{r}
total_daily_step <- aggregate(steps ~ date,data=activity,sum,na.rm = TRUE)
```
#### Make a histogram of the total number of steps taken each day
```{r dailyStepsHistogram}
hist(total_daily_step$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day"
,)
```
#### Calculate and report the mean and median total number of steps taken per day
Mean of total daily number of steps is:
```{r}
mean(total_daily_step$steps)
```
Median of total daily number of steps is:
```{r}
median(total_daily_step$steps)
```
## What is the average daily activity pattern?
Aggregate the steps by interval
```{r}
interval_steps <- aggregate(steps~interval,data=activity,mean,na.rm=TRUE)
```
#### Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r avgDailyActivity}
plot(x=interval_steps$interval,
y=interval_steps$steps,
type="l",
xlab="Interval",
ylab="Average number of steps",
main="Average daily activity pattern over intervals")
```
#### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
interval_steps [ interval_steps$steps==max(interval_steps$steps),]
```
## Imputing missing values
#### Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(is.na(activity$steps))
```
#### Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
Fill in the missing values using the mean for 5-minute interval.
#### Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
cleaned_activity <- activity
cleaned_activity[is.na(cleaned_activity$steps),"steps"] <-
interval_steps[interval_steps$interval==cleaned_activity[
is.na(cleaned_activity$steps)
,"interval"]
,"steps"]
```
#### Make a histogram of the total number of steps taken each day
```{r}
cleaned_activity_daily_total <- aggregate(steps ~ date,data=cleaned_activity,sum)
```
#### Make a histogram of the total number of steps taken each day
```{r imputedDailyStepsHistogram}
hist(cleaned_activity_daily_total$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day, after imputing NAs"
,)
```
#### Calculate and report the mean and median total number of steps taken per day.
```{r}
mean(cleaned_activity_daily_total$steps)
median(cleaned_activity_daily_total$steps)
```
#### Do these values differ from the estimates from the first part of the assignment?
Mean has not changed.
Median increases by 1.
#### What is the impact of imputing missing data on the estimates of the total daily number of steps?
Summary of total daily number of steps before and after imputing:
```{r}
summary(total_daily_step)
summary(cleaned_activity_daily_total)
```
activity <- read.csv("activity.csv",header=TRUE,quote="\"")
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
activity$interval <- as.double(activity$interval)
activity <- read.csv("activity.csv",header=TRUE,quote="\"")
setwd("C:\\Users\\kimlam\\Documents\\Coursera\\Reproducible Research\\Peer Assessment 1\\Github\\RepData_PeerAssessment1")
activity <- read.csv("activity.csv",header=TRUE,quote="\"")
library(knitr)
activity$date <- as.Date(activity$date,format="%Y-%m-%d")
activity$interval <- as.double(activity$interval)
activity$steps <- as.double(activity$steps)
total_daily_step <- aggregate(steps ~ date,data=activity,sum,na.rm = TRUE)
hist(total_daily_step$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day"
,)
mean(total_daily_step$steps)
interval_steps <- aggregate(steps~interval,data=activity,mean,na.rm=TRUE)
interval_steps [ interval_steps$steps==max(interval_steps$steps),]
sum(is.na(activity$steps))
cleaned_activity <- activity
cleaned_activity[is.na(cleaned_activity$steps),"steps"] <-
interval_steps[interval_steps$interval==cleaned_activity[
is.na(cleaned_activity$steps)
,"interval"]
,"steps"]
cleaned_activity_daily_total <- aggregate(steps ~ date,data=cleaned_activity,sum)
cleaned_activity$day <- weekdays(cleaned_activity$date)
cleaned_activity[cleaned_activity$day %in% c("Sunday","Saturday"),"day"] <- "Weekend"
cleaned_activity[cleaned_activity$day %in% c("Monday","Tuesday"
,"Wednesday","Thursday","Friday"),"day"] <- "Weekday"
cleaned_activity$day <- as.factor(cleaned_activity$day)
cleaned_activity_interval_steps <- aggregate( steps~interval
,data=cleaned_activity,mean,na.rm=TRUE)
View(cleaned_activity_interval_steps)
library(ggplot2)
qplot(x=interval
,y=steps
,data=cleaned_activity
,geom=c("line")
)
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
)
?qplot
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
,facets=day~.
)
cleaned_activity_interval_steps <- aggregate( steps~interval + days
,data=cleaned_activity,mean,na.rm=TRUE)
cleaned_activity_interval_steps <- aggregate( steps~interval + day
,data=cleaned_activity,mean,na.rm=TRUE)
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
,facets=day~.
)
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
,facets=day~.
,ylab="Number of steps"
,xlab="Interval"
,main="Number of steps by interval in weekdays/weekends"
)
View(cleaned_activity)
cleaned_activity[cleaned_activity$day=="Weekend",date]
cleaned_activity [cleaned_activity$day=="Weekend","date"]
min(cleaned_activity [cleaned_activity$day=="Weekend","date"])
View(cleaned_activity_interval_steps)
cleaned_activity_interval_steps <- aggregate( steps~ day + interval
,data=cleaned_activity,mean,na.rm=TRUE)
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
,facets=day~.
,ylab="Number of steps"
,xlab="Interval"
,main="Number of steps by interval in weekdays/weekends"
)
View(cleaned_activity_interval_steps)
write.csv(file="final.csv",cleaned_activity_interval_steps)
View(cleaned_activity)
unique(cleaned_activity[,c("date","day")])
test <- unique(cleaned_activity[,c("date","day")])
test
View(test)
write.csv(file="weekdays.csv",test)
write.csv(file="fullextract.csv",cleaned_activity)
cleaned_activity[
is.na(cleaned_activity$steps)
,"interval"
]
cleaned_activity[is.na(cleaned_activity$steps),"steps"] <-
interval_steps[interval_steps$interval==cleaned_activity[
is.na(cleaned_activity$steps)
,"interval"]
,"steps"]
is.na(cleaned_activity$steps)
?merge
cleaned_activity <-
merge(activity,interval_steps,by.x = "interval",by.y = "interval")
View(cleaned_activity)
cleaned_activity[is.na(cleaned_activity$steps),"steps"] <-
cleaned_activity[is.na(cleaned_activity$steps),"steps.y"]
cleaned_activity[is.na(cleaned_activity$steps.x),"steps"] <-
cleaned_activity[is.na(cleaned_activity$steps.x),"steps.y"]
cleaned_activity[is.na(cleaned_activity$steps.x),"steps.x"] <-
cleaned_activity[is.na(cleaned_activity$steps.x),"steps.y"]
cleaned_activity <-
merge(activity,interval_steps,by.x = "interval",by.y = "interval")
View(cleaned_activity)
cleaned_activity[is.na(cleaned_activity$steps.x),"steps.x"] <-
cleaned_activity[is.na(cleaned_activity$steps.x),"steps.y"]
View(cleaned_activity)
names(cleaned_activity)
names(cleaned_activity)["steps.x"]
class(names(cleaned_activity))
names(cleaned_activity)[2]
View(cleaned_activity)
names(cleaned_activity)[2] = "steps"
cleaned_activity$"steps.y" <- NULL
View(cleaned_activity)
cleaned_activity_daily_total <- aggregate(steps ~ date,data=cleaned_activity,sum)
hist(cleaned_activity_daily_total$steps
,xlab="Number of steps per day"
,main="Number of steps taken per day, after imputing NAs"
,)
is.na(cleaned_activity$steps)
sum(is.na(cleaned_activity$steps))
mean(cleaned_activity_daily_total$steps)
median(cleaned_activity_daily_total$steps)
summary(total_daily_step)
summary(cleaned_activity_daily_total)
cleaned_activity$day <- weekdays(cleaned_activity$date)
cleaned_activity[cleaned_activity$day %in% c("Sunday","Saturday"),"day"] <- "Weekend"
cleaned_activity[cleaned_activity$day %in% c("Monday","Tuesday"
,"Wednesday","Thursday","Friday"),"day"] <- "Weekday"
cleaned_activity$day <- as.factor(cleaned_activity$day)
cleaned_activity_interval_steps <- aggregate( steps~ day + interval
,data=cleaned_activity,mean,na.rm=TRUE)
qplot(x=interval
,y=steps
,data=cleaned_activity_interval_steps
,geom=c("line")
,facets=day~.
,ylab="Number of steps"
,xlab="Interval"
,main="Number of steps by interval in weekdays/weekends"
)
write.csv(file="final.csv",cleaned_activity_interval_steps)
write.csv(file="final.csv",cleaned_activity_interval_steps)
